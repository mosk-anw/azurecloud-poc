name: Terraform CD - Deployment

on:
  push:
    branches: [develop, staging, main]
    paths: ["live_terraform_project/**"]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      action:
        description: 'Action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
        - apply
        - destroy

permissions:
  contents: read
  actions: read

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  deploy-development:
    name: Deploy Development Environment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    defaults:
      run:
        working-directory: live_terraform_project
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.9.7

    - name: Setup backend for development
      run: |
        # Remove other backend files to avoid conflicts
        rm -f backend-staging.tf backend-production.tf 2>/dev/null || true
        # Copy development backend as the active backend
        if [ -f backend-development.tf ]; then
          cp backend-development.tf backend.tf
        else
          echo "❌ Error: backend-development.tf not found"
          exit 1
        fi

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -var-file="../configs/development.tfvars" -out=tfplan-dev
        echo "plan_exitcode=$?" >> $GITHUB_OUTPUT

    - name: Terraform Apply
      id: apply
      if: steps.plan.outputs.plan_exitcode == 0
      run: |
        echo "🚀 Deploying to Development environment..."
        terraform apply tfplan-dev
        echo "✅ Development deployment completed!"

    - name: Post-deployment verification
      if: steps.apply.outcome == 'success'
      run: |
        echo "🔍 Verifying deployment..."
        terraform output
        echo "✅ Development environment deployed successfully!"

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ steps.apply.outcome }}" == "success" ]; then
          echo "✅ Development deployment succeeded" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Development deployment failed" >> $GITHUB_STEP_SUMMARY
        fi

  deploy-staging:
    name: Deploy Staging Environment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    environment: staging
    defaults:
      run:
        working-directory: live_terraform_project
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.9.7

    - name: Setup backend for staging
      run: |
        rm -f backend-development.tf backend-production.tf 2>/dev/null || true
        if [ -f backend-staging.tf ]; then
          cp backend-staging.tf backend.tf
        else
          echo "❌ Error: backend-staging.tf not found"
          exit 1
        fi

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -var-file="../configs/staging.tfvars" -out=tfplan-staging
        echo "plan_exitcode=$?" >> $GITHUB_OUTPUT

    - name: Terraform Apply
      id: apply
      if: steps.plan.outputs.plan_exitcode == 0
      run: |
        echo "🚀 Deploying to Staging environment..."
        terraform apply tfplan-staging
        echo "✅ Staging deployment completed!"

    - name: Post-deployment verification
      if: steps.apply.outcome == 'success'
      run: |
        echo "🔍 Verifying deployment..."
        terraform output
        echo "✅ Staging environment deployed successfully!"

  deploy-production:
    name: Deploy Production Environment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    defaults:
      run:
        working-directory: live_terraform_project
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.9.7

    - name: Setup backend for production
      run: |
        rm -f backend-development.tf backend-staging.tf 2>/dev/null || true
        if [ -f backend-production.tf ]; then
          cp backend-production.tf backend.tf
        else
          echo "❌ Error: backend-production.tf not found"
          exit 1
        fi

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -var-file="../configs/production.tfvars" -out=tfplan-production
        echo "plan_exitcode=$?" >> $GITHUB_OUTPUT

    - name: Manual Approval Gate
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: ${{ github.actor }}
        minimum-approvals: 1
        issue-title: "🚨 Production Deployment Approval Required"
        issue-body: |
          ## 🚨 Production Deployment Approval
          
          **Environment**: Production
          **Branch**: ${{ github.ref_name }}
          **Commit**: ${{ github.sha }}
          
          **Plan Summary**: Changes detected and ready for deployment
          
          Please review the plan and approve this deployment.
          
          **Approve by commenting**: `/approve`
          **Reject by commenting**: `/reject`

    - name: Terraform Apply
      id: apply
      if: steps.plan.outputs.plan_exitcode == 0
      run: |
        echo "🚀 Deploying to Production environment..."
        terraform apply tfplan-production
        echo "✅ Production deployment completed!"

    - name: Post-deployment verification
      if: steps.apply.outcome == 'success'
      run: |
        echo "🔍 Verifying deployment..."
        terraform output
        echo "✅ Production environment deployed successfully!"

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Generate Deployment Summary
      run: |
        echo "## 🚀 Terraform CD Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Environment | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Development | ${{ needs.deploy-development.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Staging | ${{ needs.deploy-staging.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Production | ${{ needs.deploy-production.result }} |" >> $GITHUB_STEP_SUMMARY
