name: Terraform CI

on:
  pull_request:
    branches: [develop, staging, main]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform-ci.yml'

env:
  TF_VERSION: '1.9.7'
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

permissions:
  contents: read
  security-events: write
  pull-requests: write
  id-token: write

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov security scan
        id: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true

      - name: Upload Checkov results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  terraform-validate:
    name: Terraform Format & Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Auto-fix formatting
        if: steps.fmt.outcome == 'failure'
        run: |
          terraform fmt -recursive
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git diff --staged --quiet || git commit -m "auto-fix: terraform formatting"

      - name: Push formatting changes
        if: steps.fmt.outcome == 'failure'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref }}

      - name: Terraform Init (without backend)
        run: |
          cd live_terraform_project
          # Create a temporary backend-free configuration
          cp main.tf main.tf.bak
          cp variables.tf variables.tf.bak
          # Remove backend configs temporarily
          rm -f backend-*.tf
          terraform init -backend=false

      - name: Terraform Validate
        run: |
          cd live_terraform_project
          terraform validate

      - name: Restore files
        run: |
          cd live_terraform_project
          mv main.tf.bak main.tf || true
          mv variables.tf.bak variables.tf || true
          git checkout backend-*.tf || true

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [security-scan, terraform-validate]
    strategy:
      matrix:
        environment: [development, staging, production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup environment-specific backend
        run: |
          cd live_terraform_project
          # Copy the appropriate backend file
          cp backend-${{ matrix.environment }}.tf backend.tf
          # Remove other backend files to avoid duplicates
          rm -f backend-development.tf backend-staging.tf backend-production.tf

      - name: Terraform Init
        run: |
          cd live_terraform_project
          terraform init -reconfigure

      - name: Terraform Plan
        id: plan
        run: |
          cd live_terraform_project
          terraform plan -var-file="../configs/${{ matrix.environment }}.tfvars" -out=${{ matrix.environment }}.tfplan
        continue-on-error: true

      - name: Comment PR (Success)
        if: steps.plan.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `
            ## üü¢ Terraform Plan Success - ${{ matrix.environment }}
            
            <details>
            <summary>Environment: ${{ matrix.environment }}</summary>
            
            ‚úÖ Plan generated successfully
            - Backend: Configured for ${{ matrix.environment }}
            - Variables: configs/${{ matrix.environment }}.tfvars
            - Status: Ready for deployment
            
            </details>
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Comment PR (Failure)
        if: steps.plan.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `
            ## üî¥ Terraform Plan Failed - ${{ matrix.environment }}
            
            <details>
            <summary>Environment: ${{ matrix.environment }} - Click to see error</summary>
            
            ‚ùå Plan failed for ${{ matrix.environment }} environment
            
            Please check the Actions tab for detailed error information.
            
            </details>
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [security-scan, terraform-validate, terraform-plan]
    if: always()
    steps:
      - name: Generate summary
        uses: actions/github-script@v7
        with:
          script: |
            const scanResult = '${{ needs.security-scan.result }}';
            const validateResult = '${{ needs.terraform-validate.result }}';
            const planResult = '${{ needs.terraform-plan.result }}';
            
            const getIcon = (result) => {
              switch(result) {
                case 'success': return '‚úÖ';
                case 'failure': return '‚ùå';
                case 'cancelled': return '‚èπÔ∏è';
                default: return '‚ö†Ô∏è';
              }
            };
            
            const summary = `
            ## üìã CI Pipeline Summary
            
            | Check | Status | Result |
            |-------|--------|--------|
            | Security Scan | ${getIcon(scanResult)} | ${scanResult} |
            | Terraform Validate | ${getIcon(validateResult)} | ${validateResult} |
            | Terraform Plan | ${getIcon(planResult)} | ${planResult} |
            
            ### Next Steps
            ${planResult === 'success' ? 'üöÄ Ready to merge and deploy!' : 'üîß Please fix the issues above before merging.'}
            
            ---
            *ü§ñ Automated CI Pipeline - Strict GitOps Promotion*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
