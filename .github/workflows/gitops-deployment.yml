name: GitOps Deployment

on:
  pull_request:
    branches: [develop]
    paths: ['live_terraform_project/**']
  push:
    branches: [develop, staging, main]
    paths: ['live_terraform_project/**']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      storage_account: ${{ steps.env.outputs.storage_account }}
      container_name: ${{ steps.env.outputs.container_name }}
    steps:
      - name: Determine Environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            ENV="development"
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            ENV="staging"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            ENV="production"
          else
            ENV="development"  # Default for PR builds
          fi
          
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          
          case $ENV in
            development)
              echo "storage_account=tfstatedeva7f2b9c8" >> $GITHUB_OUTPUT
              echo "container_name=tfstate-dev" >> $GITHUB_OUTPUT
              ;;
            staging)
              echo "storage_account=tfstateprda7f2b9c8" >> $GITHUB_OUTPUT
              echo "container_name=tfstate-staging" >> $GITHUB_OUTPUT
              ;;
            production)
              echo "storage_account=tfstatestaging123" >> $GITHUB_OUTPUT
              echo "container_name=tfstate-prod" >> $GITHUB_OUTPUT
              ;;
          esac

  deploy:
    runs-on: ubuntu-latest
    needs: determine-environment
    environment: ${{ needs.determine-environment.outputs.environment }}
    defaults:
      run:
        working-directory: live_terraform_project
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.0"

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Backend Config
        run: |
          cat > backend-config.tfvars << EOF
          resource_group_name  = "rg-tfstate-${{ needs.determine-environment.outputs.environment }}"
          storage_account_name = "${{ needs.determine-environment.outputs.storage_account }}"
          container_name       = "${{ needs.determine-environment.outputs.container_name }}"
          key                  = "terraform.tfstate"
          EOF

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config=backend-config.tfvars \
            -input=false

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var="environment=${{ needs.determine-environment.outputs.environment }}" \
            -out=tfplan \
            -input=false
        continue-on-error: true

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const output = `#### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Environment: \`${{ needs.determine-environment.outputs.environment }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        run: |
          terraform apply \
            -var="environment=${{ needs.determine-environment.outputs.environment }}" \
            -auto-approve \
            -input=false \
            tfplan
