name: GitOps Infrastructure Deployment

on:
  push:
    branches: [main, develop]
    paths: ["live_terraform_project/**"]
  pull_request:
    branches: [main, develop]
    paths: ["live_terraform_project/**"]
  workflow_dispatch:
  schedule:
    # Drift detection every 6 hours
    - cron: "0 */6 * * *"

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  TF_VERSION: "1.5.0"

jobs:
  detect-environment:
    name: 🔍 Detect Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      backend_file: ${{ steps.env.outputs.backend_file }}
      auto_deploy: ${{ steps.env.outputs.auto_deploy }}
    steps:
      - name: 🔍 Determine Environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "backend_file=backend-production.tf" >> $GITHUB_OUTPUT
            echo "auto_deploy=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "backend_file=backend-staging.tf" >> $GITHUB_OUTPUT
            echo "auto_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "backend_file=backend-development.tf" >> $GITHUB_OUTPUT
            echo "auto_deploy=true" >> $GITHUB_OUTPUT
          fi

  terraform-plan:
    name: 📋 Terraform Plan
    runs-on: ubuntu-latest
    needs: detect-environment
    if: github.event_name != 'schedule'
    environment: ${{ needs.detect-environment.outputs.environment }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🔧 Configure Backend
        run: |
          cd live_terraform_project
          cp ${{ needs.detect-environment.outputs.backend_file }} backend.tf

      - name: 🚀 Terraform Init
        run: |
          cd live_terraform_project
          terraform init

      - name: 📋 Terraform Validate
        run: |
          cd live_terraform_project
          terraform validate

      - name: 🔒 Security Scan
        run: |
          cd live_terraform_project
          pip install checkov
          checkov -d . --framework terraform || true

      - name: 📊 Terraform Plan
        id: plan
        run: |
          cd live_terraform_project
          terraform plan -detailed-exitcode -no-color -out=tfplan
        continue-on-error: true

      - name: 💰 Cost Estimation
        run: |
          cd live_terraform_project
          echo "💰 Estimated monthly cost: ~$2-5 (depends on usage)"
          echo "📊 Resources: Resource Group + Storage Account"

      - name: 💬 Comment Plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = \`
            #### 🏗️ Terraform Plan Results - ${{ needs.detect-environment.outputs.environment }}

            **Status**: ${{ steps.plan.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            **Environment**: ${{ needs.detect-environment.outputs.environment }}
            **Auto Deploy**: ${{ needs.detect-environment.outputs.auto_deploy }}

            <details><summary>📊 Show Plan Details</summary>

            \\\`\\\`\\\`
            ${{ steps.plan.outputs.stdout }}
            \\\`\\\`\\\`

            </details>

            **GitOps Status**: 
            - 🔒 Remote state backend configured
            - 🔍 Security scan completed
            - 💰 Cost estimation included
            - 📋 Ready for deployment
            \`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  terraform-apply:
    name: 🚀 Terraform Apply
    runs-on: ubuntu-latest
    needs: [detect-environment, terraform-plan]
    if: |
      github.event_name != 'schedule' && 
      needs.terraform-plan.result == 'success' && 
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    environment:
      name: ${{ needs.detect-environment.outputs.environment }}
      url: https://portal.azure.com

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🔧 Configure Backend
        run: |
          cd live_terraform_project
          cp ${{ needs.detect-environment.outputs.backend_file }} backend.tf

      - name: 🚀 Terraform Apply
        run: |
          cd live_terraform_project
          terraform init
          terraform apply -auto-approve

      - name: 📊 Deployment Summary
        run: |
          echo "✅ Deployment completed successfully"
          echo "🌍 Environment: ${{ needs.detect-environment.outputs.environment }}"
          echo "🗄️ State: Remote backend in Azure Storage"
          echo "📋 GitOps: Workflow completed"

  drift-detection:
    name: 🔍 Drift Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    strategy:
      matrix:
        environment: [staging, production]

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🔍 Check for Drift
        run: |
          cd live_terraform_project
          cp backend-${{ matrix.environment }}.tf backend.tf
          terraform init
          terraform plan -detailed-exitcode

          if [ $? -eq 2 ]; then
            echo "🚨 DRIFT DETECTED in ${{ matrix.environment }}"
          else
            echo "✅ No drift detected in ${{ matrix.environment }}"
          fi
