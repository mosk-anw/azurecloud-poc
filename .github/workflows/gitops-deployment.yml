name: GitOps Infrastructure Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'live_terraform_project/**'
  pull_request:
    branches:
      - main
    paths:
      - 'live_terraform_project/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
  schedule:
    - cron: '0 6 * * 1-5'  # Run drift detection weekdays at 6 AM UTC

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  TF_VAR_environment: ${{ github.event.inputs.environment || 'development' }}

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov action
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: live_terraform_project/
        framework: terraform
        output_format: sarif
        output_file_path: reports/results.sarif
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: reports/results.sarif

  validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: live_terraform_project
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5.0

    - name: Terraform Format Check
      run: terraform fmt -check=true

    - name: Terraform Init
      run: terraform init -backend=false

    - name: Terraform Validate
      run: terraform validate

  plan-development:
    name: Plan Development
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    environment: development
    defaults:
      run:
        working-directory: live_terraform_project
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5.0

    - name: Copy Development Backend
      run: cp backend-development.tf backend.tf

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -var-file="../configs/development.tfvars" -out=tfplan-dev

    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v3
      with:
        name: tfplan-development
        path: live_terraform_project/tfplan-dev

  deploy-development:
    name: Deploy Development
    runs-on: ubuntu-latest
    needs: plan-development
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: development
    defaults:
      run:
        working-directory: live_terraform_project
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5.0

    - name: Download Plan Artifact
      uses: actions/download-artifact@v3
      with:
        name: tfplan-development
        path: live_terraform_project/

    - name: Copy Development Backend
      run: cp backend-development.tf backend.tf

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply
      run: terraform apply tfplan-dev

  plan-staging:
    name: Plan Staging
    runs-on: ubuntu-latest
    needs: deploy-development
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    defaults:
      run:
        working-directory: live_terraform_project
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5.0

    - name: Copy Staging Backend
      run: cp backend-staging.tf backend.tf

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -var-file="../configs/staging.tfvars" -out=tfplan-staging

    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v3
      with:
        name: tfplan-staging
        path: live_terraform_project/tfplan-staging

  deploy-staging:
    name: Deploy Staging
    runs-on: ubuntu-latest
    needs: plan-staging
    environment: staging
    defaults:
      run:
        working-directory: live_terraform_project
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5.0

    - name: Download Plan Artifact
      uses: actions/download-artifact@v3
      with:
        name: tfplan-staging
        path: live_terraform_project/

    - name: Copy Staging Backend
      run: cp backend-staging.tf backend.tf

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply
      run: terraform apply tfplan-staging

  plan-production:
    name: Plan Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    defaults:
      run:
        working-directory: live_terraform_project
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5.0

    - name: Copy Production Backend
      run: cp backend-production.tf backend.tf

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -var-file="../configs/production.tfvars" -out=tfplan-prod

    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v3
      with:
        name: tfplan-production
        path: live_terraform_project/tfplan-prod

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: plan-production
    environment: production
    defaults:
      run:
        working-directory: live_terraform_project
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5.0

    - name: Download Plan Artifact
      uses: actions/download-artifact@v3
      with:
        name: tfplan-production
        path: live_terraform_project/

    - name: Copy Production Backend
      run: cp backend-production.tf backend.tf

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply
      run: terraform apply tfplan-prod

  drift-detection:
    name: Drift Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    strategy:
      matrix:
        environment: [development, staging, production]
    defaults:
      run:
        working-directory: live_terraform_project
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5.0

    - name: Copy Backend for Environment
      run: cp backend-${{ matrix.environment }}.tf backend.tf

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan (Drift Check)
      run: |
        terraform plan -var-file="../configs/${{ matrix.environment }}.tfvars" -detailed-exitcode -no-color || {
          if [ $? -eq 2 ]; then
            echo "DRIFT_DETECTED=true" >> $GITHUB_ENV
            echo "Drift detected in ${{ matrix.environment }} environment!"
          fi
        }

    - name: Create Issue for Drift
      if: env.DRIFT_DETECTED == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Infrastructure Drift Detected - ${{ matrix.environment }}`,
            body: `ðŸš¨ **Infrastructure Drift Detected**
            
            **Environment:** ${{ matrix.environment }}
            **Detection Time:** ${new Date().toISOString()}
            
            Please review the infrastructure changes and take appropriate action.
            
            **Next Steps:**
            1. Review the drift details in the workflow logs
            2. Determine if changes are expected
            3. Update Terraform configuration if needed
            4. Re-run deployment to sync infrastructure
            `,
            labels: ['infrastructure', 'drift-detection', '${{ matrix.environment }}']
          })
